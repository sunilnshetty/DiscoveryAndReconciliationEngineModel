//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.04.01 at 08:15:46 PM IST 
//


package com.lte.discovery.reconciliation.adapter.response;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 *         
 * <pre>
 * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;p xmlns:gen="http://www.tmforum.org/mtop/fmw/xsd/gen/v1" xmlns:hdr="http://www.tmforum.org/mtop/fmw/xsd/hdr/v1" xmlns:tns="http://www.tmforum.org/mtop/fmw/xsd/msg/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;Reference to all supported exception types.&lt;/p&gt;
 * </pre>
 * 
 *       
 * 
 * <p>Java class for AllExceptionsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AllExceptionsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}accessDenied"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}capacityExceeded"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}commLoss"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}entityNotFound"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}internalError"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}invalidFilterDefinition"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}invalidInput"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}invalidTopic"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}notificationServiceProblem"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}notImplemented"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}notInValidState"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}objectInUse"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}protectionEffortNotMet"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}timeslotInUse"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}tooManyOpenIterators"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}tpInvalidEndPoint"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}unableToComply"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}unsupportedCompressionFormat"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}unsupportedPackingFormat"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}unsupportedRoutingConstraints"/>
 *         &lt;element ref="{http://www.tmforum.org/mtop/fmw/xsd/msg/v1}userlabelInUse"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AllExceptionsType", namespace = "http://www.tmforum.org/mtop/fmw/xsd/msg/v1", propOrder = {
    "accessDenied",
    "capacityExceeded",
    "commLoss",
    "entityNotFound",
    "internalError",
    "invalidFilterDefinition",
    "invalidInput",
    "invalidTopic",
    "notificationServiceProblem",
    "notImplemented",
    "notInValidState",
    "objectInUse",
    "protectionEffortNotMet",
    "timeslotInUse",
    "tooManyOpenIterators",
    "tpInvalidEndPoint",
    "unableToComply",
    "unsupportedCompressionFormat",
    "unsupportedPackingFormat",
    "unsupportedRoutingConstraints",
    "userlabelInUse"
})
@XmlSeeAlso({
    GetAllDataIteratorExceptionType.class,
    GetAllManagedElementsPassingFilterException.class,
    GetAllManagedElementsException.class,
    GetAllManagedElementsWrtOsException.class,
    GetManagedElementException.class
})
public class AllExceptionsType {

    protected BaseExceptionMessageType accessDenied;
    protected BaseExceptionMessageType capacityExceeded;
    protected BaseExceptionMessageType commLoss;
    protected BaseExceptionMessageType entityNotFound;
    protected BaseExceptionMessageType internalError;
    protected BaseExceptionMessageType invalidFilterDefinition;
    protected BaseExceptionMessageType invalidInput;
    protected BaseExceptionMessageType invalidTopic;
    protected BaseExceptionMessageType notificationServiceProblem;
    protected BaseExceptionMessageType notImplemented;
    protected BaseExceptionMessageType notInValidState;
    protected BaseExceptionMessageType objectInUse;
    protected BaseExceptionMessageType protectionEffortNotMet;
    protected BaseExceptionMessageType timeslotInUse;
    protected BaseExceptionMessageType tooManyOpenIterators;
    protected BaseExceptionMessageType tpInvalidEndPoint;
    protected BaseExceptionMessageType unableToComply;
    protected BaseExceptionMessageType unsupportedCompressionFormat;
    protected BaseExceptionMessageType unsupportedPackingFormat;
    protected BaseExceptionMessageType unsupportedRoutingConstraints;
    protected BaseExceptionMessageType userlabelInUse;

    /**
     * Gets the value of the accessDenied property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getAccessDenied() {
        return accessDenied;
    }

    /**
     * Sets the value of the accessDenied property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setAccessDenied(BaseExceptionMessageType value) {
        this.accessDenied = value;
    }

    /**
     * Gets the value of the capacityExceeded property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getCapacityExceeded() {
        return capacityExceeded;
    }

    /**
     * Sets the value of the capacityExceeded property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setCapacityExceeded(BaseExceptionMessageType value) {
        this.capacityExceeded = value;
    }

    /**
     * Gets the value of the commLoss property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getCommLoss() {
        return commLoss;
    }

    /**
     * Sets the value of the commLoss property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setCommLoss(BaseExceptionMessageType value) {
        this.commLoss = value;
    }

    /**
     * Gets the value of the entityNotFound property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getEntityNotFound() {
        return entityNotFound;
    }

    /**
     * Sets the value of the entityNotFound property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setEntityNotFound(BaseExceptionMessageType value) {
        this.entityNotFound = value;
    }

    /**
     * Gets the value of the internalError property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getInternalError() {
        return internalError;
    }

    /**
     * Sets the value of the internalError property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setInternalError(BaseExceptionMessageType value) {
        this.internalError = value;
    }

    /**
     * Gets the value of the invalidFilterDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getInvalidFilterDefinition() {
        return invalidFilterDefinition;
    }

    /**
     * Sets the value of the invalidFilterDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setInvalidFilterDefinition(BaseExceptionMessageType value) {
        this.invalidFilterDefinition = value;
    }

    /**
     * Gets the value of the invalidInput property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getInvalidInput() {
        return invalidInput;
    }

    /**
     * Sets the value of the invalidInput property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setInvalidInput(BaseExceptionMessageType value) {
        this.invalidInput = value;
    }

    /**
     * Gets the value of the invalidTopic property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getInvalidTopic() {
        return invalidTopic;
    }

    /**
     * Sets the value of the invalidTopic property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setInvalidTopic(BaseExceptionMessageType value) {
        this.invalidTopic = value;
    }

    /**
     * Gets the value of the notificationServiceProblem property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getNotificationServiceProblem() {
        return notificationServiceProblem;
    }

    /**
     * Sets the value of the notificationServiceProblem property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setNotificationServiceProblem(BaseExceptionMessageType value) {
        this.notificationServiceProblem = value;
    }

    /**
     * Gets the value of the notImplemented property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getNotImplemented() {
        return notImplemented;
    }

    /**
     * Sets the value of the notImplemented property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setNotImplemented(BaseExceptionMessageType value) {
        this.notImplemented = value;
    }

    /**
     * Gets the value of the notInValidState property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getNotInValidState() {
        return notInValidState;
    }

    /**
     * Sets the value of the notInValidState property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setNotInValidState(BaseExceptionMessageType value) {
        this.notInValidState = value;
    }

    /**
     * Gets the value of the objectInUse property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getObjectInUse() {
        return objectInUse;
    }

    /**
     * Sets the value of the objectInUse property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setObjectInUse(BaseExceptionMessageType value) {
        this.objectInUse = value;
    }

    /**
     * Gets the value of the protectionEffortNotMet property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getProtectionEffortNotMet() {
        return protectionEffortNotMet;
    }

    /**
     * Sets the value of the protectionEffortNotMet property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setProtectionEffortNotMet(BaseExceptionMessageType value) {
        this.protectionEffortNotMet = value;
    }

    /**
     * Gets the value of the timeslotInUse property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getTimeslotInUse() {
        return timeslotInUse;
    }

    /**
     * Sets the value of the timeslotInUse property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setTimeslotInUse(BaseExceptionMessageType value) {
        this.timeslotInUse = value;
    }

    /**
     * Gets the value of the tooManyOpenIterators property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getTooManyOpenIterators() {
        return tooManyOpenIterators;
    }

    /**
     * Sets the value of the tooManyOpenIterators property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setTooManyOpenIterators(BaseExceptionMessageType value) {
        this.tooManyOpenIterators = value;
    }

    /**
     * Gets the value of the tpInvalidEndPoint property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getTpInvalidEndPoint() {
        return tpInvalidEndPoint;
    }

    /**
     * Sets the value of the tpInvalidEndPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setTpInvalidEndPoint(BaseExceptionMessageType value) {
        this.tpInvalidEndPoint = value;
    }

    /**
     * Gets the value of the unableToComply property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getUnableToComply() {
        return unableToComply;
    }

    /**
     * Sets the value of the unableToComply property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setUnableToComply(BaseExceptionMessageType value) {
        this.unableToComply = value;
    }

    /**
     * Gets the value of the unsupportedCompressionFormat property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getUnsupportedCompressionFormat() {
        return unsupportedCompressionFormat;
    }

    /**
     * Sets the value of the unsupportedCompressionFormat property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setUnsupportedCompressionFormat(BaseExceptionMessageType value) {
        this.unsupportedCompressionFormat = value;
    }

    /**
     * Gets the value of the unsupportedPackingFormat property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getUnsupportedPackingFormat() {
        return unsupportedPackingFormat;
    }

    /**
     * Sets the value of the unsupportedPackingFormat property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setUnsupportedPackingFormat(BaseExceptionMessageType value) {
        this.unsupportedPackingFormat = value;
    }

    /**
     * Gets the value of the unsupportedRoutingConstraints property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getUnsupportedRoutingConstraints() {
        return unsupportedRoutingConstraints;
    }

    /**
     * Sets the value of the unsupportedRoutingConstraints property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setUnsupportedRoutingConstraints(BaseExceptionMessageType value) {
        this.unsupportedRoutingConstraints = value;
    }

    /**
     * Gets the value of the userlabelInUse property.
     * 
     * @return
     *     possible object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public BaseExceptionMessageType getUserlabelInUse() {
        return userlabelInUse;
    }

    /**
     * Sets the value of the userlabelInUse property.
     * 
     * @param value
     *     allowed object is
     *     {@link BaseExceptionMessageType }
     *     
     */
    public void setUserlabelInUse(BaseExceptionMessageType value) {
        this.userlabelInUse = value;
    }

}
